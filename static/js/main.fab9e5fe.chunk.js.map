{"version":3,"sources":["components/Task/TaskComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TaskComponent","tags","task","updateTask","onClick","useState","tag","selectedTag","setSelectedTag","edit","setEdit","description","inputValue","setInputValue","completed","isCompleted","setIsCompleted","selectedImage","setSelectedImage","className","disabled","value","onChange","e","target","alt","width","src","imgSrc","URL","createObjectURL","style","display","name","map","htmlFor","id","type","event","files","reader","FileReader","addEventListener","result","readAsDataURL","decoder","App","saved","localStorage","getItem","JSON","parse","tasks","setTasks","activeTag","setActiveTag","showCompleted","setShowCompleted","progressBar","setProgressBar","errorMsg","setErrorMsg","useEffect","setItem","stringify","doneTasks","filter","item","length","Math","trunc","input","useRef","current","focus","buttons","buttonName","undefined","find","trim","ref","button","checked","stopPropagation","bgColor","baseBgColor","labelColor","index","updatedTask","newTasks","i","deleteTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fab9e5fe.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Task } from '../../App';\n\ntype Props = {\n  tags: string[];\n  task: Task;\n  updateTask: (updatedTask: Task) => void;\n  onClick: () => void;\n};\n\nconst TaskComponent: React.FC<Props> = ({\n  tags,\n  task,\n  updateTask,\n  onClick,\n}) => {\n  const [selectedTag, setSelectedTag] = useState<string>(task.tag);\n  const [edit, setEdit] = useState<boolean>(false);\n  const [inputValue, setInputValue] = useState(task.description);\n  const [isCompleted, setIsCompleted] = useState(task.completed);\n  const [selectedImage, setSelectedImage] = useState<File | null>(null);\n  const toggleCompleted = (done: boolean) => {\n    setIsCompleted(!isCompleted);\n    updateTask({ ...task, completed: !isCompleted });\n  };\n\n  const decoder = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => {\n      updateTask({\n        ...task,\n        imgSrc: reader.result,\n      });\n    });\n    if (event && event.target && event.target.files) {\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  };\n\n  const saveChanges = () => {\n    setEdit(false);\n    updateTask({\n      ...task,\n      description: inputValue,\n      tag: selectedTag,\n    });\n  };\n\n  return (\n    <div className={task.completed ? 'task__item done' : 'task__item'}>\n      {edit ? (\n        <span>\n          <input\n            className={edit ? 'task__text active' : 'task__text'}\n            disabled={!edit}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n          />\n        </span>\n      ) : (\n        <span className=\"task__desc\">{task.description}</span>\n      )}\n\n      <div className=\"upload__image\">\n        {selectedImage ? (\n          <div>\n            <img\n              alt=\"not fount\"\n              width=\"250px\"\n              // @ts-ignore\n              src={task.imgSrc ? URL.createObjectURL(selectedImage) : task.imgSrc}\n            />\n            <br />\n            <button\n              className=\"button button--delete\"\n              onClick={() => setSelectedImage(null)}\n            >\n              remove\n            </button>\n          </div>\n        ) : (\n          <div style={{ display: !task.imgSrc ? 'none' : 'block' }}>\n            <img\n              alt=\"not found\"\n              width=\"250px\"\n              // @ts-ignore\n              src={task.imgSrc}\n            />\n            <br />\n            <button\n              className=\"button button--delete\"\n              onClick={() => {\n                updateTask({ ...task, imgSrc: null });\n              }}\n            >\n              remove\n            </button>\n          </div>\n        )}\n      </div>\n\n      {edit ? (\n        <div className=\"button__wrapper\">\n          <select\n            className=\"dropdown\"\n            value={selectedTag}\n            name={selectedTag}\n            onChange={(e) => setSelectedTag(e.target.value)}\n          >\n            {tags.map((tag) => (\n              <option key={tag} value={tag}>\n                {tag}\n              </option>\n            ))}\n          </select>\n          <button className=\"button button--save\" onClick={() => saveChanges()}>\n            save\n          </button>\n        </div>\n      ) : (\n        <div className=\"button__wrapper\">\n          <button className=\"button button--edit\" onClick={() => setEdit(true)}>\n            edit\n          </button>\n\n          <button className=\"button button--upload\">\n            <label htmlFor={task.description} className=\"upload\">\n              image\n              <input\n                name=\"myImage\"\n                id={task.description}\n                style={{ display: 'none' }}\n                type=\"file\"\n                onChange={(event) => {\n                  if (event && event.target && event.target.files) {\n                    setSelectedImage(event.target.files[0]);\n                  }\n                  decoder(event);\n                }}\n              />\n            </label>\n          </button>\n          <button\n            className=\"button button--completed\"\n            onClick={() => toggleCompleted(!isCompleted)}\n          >\n            {task.completed === false ? 'done' : 'undone'}\n          </button>\n          <button className=\"button button--remove\" onClick={() => onClick()}>\n            X\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TaskComponent;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useRef, useEffect } from 'react';\nimport ProgressBar from '@ramonak/react-progress-bar';\n\nimport './App.scss';\nimport TaskComponent from './components/Task/TaskComponent';\n\nexport type Task = {\n  description: string;\n  completed: boolean;\n  tag: string;\n  edit: boolean;\n  imgSrc: string | ArrayBuffer | null;\n};\n\nconst tags = ['today', 'this week', 'this month', 'all'];\n\nconst App = () => {\n  const [tasks, setTasks] = useState<Task[]>(() => {\n    const saved = localStorage.getItem('toDoList') || '';\n    if (saved) {\n      return JSON.parse(saved);\n    }\n    return [];\n  });\n  const [inputValue, setInputValue] = useState('');\n  const [activeTag, setActiveTag] = useState<string>('all');\n  const [showCompleted, setShowCompleted] = useState(false);\n  const [progressBar, setProgressBar] = useState(0);\n  const [errorMsg, setErrorMsg] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem('toDoList', JSON.stringify(tasks));\n  }, [tasks]);\n\n  useEffect(() => {\n    const doneTasks = [...tasks].filter((item) => item.completed).length;\n\n    const progressBarCalculator = () => {\n      if (!tasks.length) {\n        return 0;\n      }\n      return Math.trunc((100 / tasks.length) * doneTasks);\n    };\n    setProgressBar(progressBarCalculator);\n  }, [tasks]);\n\n  const input = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    input.current?.focus();\n  }, []);\n\n  const addNewTask = () => {\n    const inputValid = tasks.find((task) => task.description === inputValue);\n    if (inputValid === undefined && inputValue.trim()) {\n      setErrorMsg(false);\n      setTasks([\n        ...tasks,\n        {\n          description: inputValue,\n          completed: false,\n          tag: tags[0],\n          edit: false,\n          imgSrc: null,\n        },\n      ]);\n      setInputValue('');\n    } else {\n      setErrorMsg(true);\n    }\n  };\n\n  const deleteTask = (index: number) => {\n    setTasks(tasks.filter((task, i) => i !== index));\n  };\n\n  const updateTask = (updatedTask: Task, description: string) => {\n    const newTasks = [...tasks].map((task) => {\n      if (task.description === description) {\n        return updatedTask;\n      }\n      return task;\n    });\n    setTasks(newTasks);\n  };\n\n  const clearAll = () => {\n    setTasks([]);\n    setInputValue('');\n    setErrorMsg(false);\n  };\n\n  const buttons = [\n    {\n      buttonName: 'Add',\n      onClick: () => {\n        addNewTask();\n      },\n    },\n    {\n      buttonName: 'Clear All',\n      onClick: () => {\n        clearAll();\n      },\n    },\n  ];\n\n  return (\n    <div className=\"container\">\n      <div className=\"todo\">\n        <span className={errorMsg ? 'error__message active' : 'error__message'}>\n          Empty field or duplicated task\n        </span>\n        <div className=\"wrapper\">\n          <input\n            className={errorMsg ? 'input error' : 'input'}\n            type=\"text\"\n            ref={input}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n          />\n          <div className=\"main__buttons\">\n            {buttons.map((button) => (\n              <button\n                className=\"button\"\n                key={button.buttonName}\n                onClick={button.onClick}\n              >\n                {button.buttonName}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"bar\">\n          <div className=\"checkbox\">\n            <input\n              id=\"done\"\n              className=\"checkbox__input\"\n              type=\"checkbox\"\n              checked={showCompleted}\n              onChange={(e) => {\n                e.stopPropagation();\n                setShowCompleted((e.target as HTMLInputElement).checked);\n              }}\n            />\n            <label className=\"checkbox__label\" htmlFor=\"done\">\n              Completed tasks\n            </label>\n          </div>\n\n          <div className=\"tags__buttons\">\n            {tags.map((tag) => (\n              <button\n                key={tag}\n                className=\"button button--tags\"\n                onClick={() => setActiveTag(tag)}\n              >\n                {tag}\n              </button>\n            ))}\n          </div>\n        </div>\n        <h1 className=\"progress__title\">Progress bar</h1>\n        <ProgressBar\n          completed={progressBar}\n          bgColor=\"#bd5a96\"\n          baseBgColor=\"#6b5862\"\n          labelColor=\"#ffffff\"\n        />\n      </div>\n      <div className=\"list__wrapper\">\n        {tasks\n          .filter((task) => (activeTag === 'all' ? task : task.tag === activeTag))\n          .filter((task) => (showCompleted ? task.completed : task))\n          .map((task, index) => (\n            <TaskComponent\n              key={index}\n              tags={tags}\n              task={task}\n              updateTask={(updatedTask) => updateTask(updatedTask, task.description)}\n              onClick={() => deleteTask(index)}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}